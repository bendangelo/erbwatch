#!/usr/bin/env ruby
require 'listen'
require 'optparse'

def parse_options
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: slimwatch [options] SLIM_DIR"
    opts.on("-s", "--strict") { options[:strict] = true }
    opts.on("-c", "--compile") { options[:compile] = true }
    opts.on("-r", "--rails") { options[:rails] = true }
    opts.on("-t", "--trace") { options[:trace] = true }
    opts.on("-l", "--logic-less") { options[:logic_less] = true }
    opts.on("-p", "--pretty") { options[:pretty] = true }
    opts.on("-o", "--option NAME=CODE") { |v| (options[:options] ||= []) << v }
    opts.on("-h", "--help") do
      puts opts
      exit
    end
    opts.on("-v", "--version") do
      puts "SlimWatch version 1.0"
      exit
    end
  end.parse!

  if ARGV.empty?
    puts "Error: SLIM_DIR is required."
    puts "Usage: slimwatch [options] SLIM_DIR"
    exit 1
  end

  [options, ARGV.first]
end

def slim_it(filename, options)
  infile = filename
  outfile = infile.sub(/\.slim$/, '.html')
  
  slim_options = options.map { |k, v| v == true ? "--#{k}" : "--#{k}=#{v}" if v }.compact.join(' ')
  command = "slimrb #{slim_options} #{infile} > #{outfile}"
  
  system(command)
  puts "Generated #{outfile}"
end

def main(listen_to, options)
  # Initial run
  Dir.glob(File.join(listen_to, '**', '*.slim')).each do |filepath|
    slim_it(filepath, options)
  end

  # Now listen
  listener = Listen.to(listen_to, only: /\.slim$/) do |modified, added, removed|
    (modified + added).each do |filepath|
      puts "Updating HTML file for #{filepath}"
      slim_it(filepath, options)
    end

    removed.each do |filepath|
      outfile = filepath.sub(/\.slim$/, '.html')
      if File.exist?(outfile)
        File.delete(outfile)
        puts "Deleted #{outfile}"
      end
    end
  end

  puts "Monitoring #{listen_to} for changes to .slim files. Press Ctrl-C to stop."
  listener.start
  sleep
rescue Interrupt
  puts "\nStopping SlimWatch."
end

options, listen_to = parse_options
main(listen_to, options)
